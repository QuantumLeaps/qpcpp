<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <documentation>This is a little more advanced Blinky example for the Arduino DUE board. The example demonstrates:

1. One active object class &quot;Blinky&quot; (inside the package &quot;AOs&quot;)
2. A simple state machine
3. The Board Support Package (BSP), see below.

----
# Board configuration:

The external LED needs to be connected between the pins GND and 13, with the short LEG leg at the GND pin.

----
# More info

This example demonstrates the concept of the Board Support Package (BSP), which separates the &quot;What&quot; needs to be done from &quot;How&quot; this is done. The BSP consists of two files &quot;bsp.h&quot; and &quot;bsp.cpp&quot;. The application (active objects) need to include only the &quot;bsp.h&quot; header file and the state machines call only the BSP functions, but don't interact with the hardware directly.

This structure of the code is recommended for applications with only one active object. (See also the dpp_bsp example).</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="instance" type="Blinky" visibility="0x00" properties="0x01">
    <documentation>static class instance (Singleton)</documentation>
   </attribute>
   <operation name="Blinky" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>(void)e; // unused parameter
m_timeEvt.armX(BSP::TICKS_PER_SEC/2, BSP::TICKS_PER_SEC/2);

QS_OBJ_DICTIONARY(&amp;Blinky::instance);
QS_SIG_DICTIONARY(TIMEOUT_SIG, nullptr);</action>
     <initial_glyph conn="2,2,5,1,20,8,-4">
      <action box="0,-2,32,6"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP::ledOff();</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,18,8,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,8,16,10">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP::ledOn();</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,30,3,1,20,-17,-4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,22,16,10">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="34,34"/>
   </statechart>
  </class>
  <attribute name="AO_Blinky" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <documentation>the opaque pointer to the Blinky AO</documentation>
   <code>= &amp;Blinky::instance;</code>
  </attribute>
 </package>
 <directory name=".">
  <file name="bsp.hpp">
   <text>#ifndef BSP_HPP
#define BSP_HPP

class BSP {
public:
    enum { TICKS_PER_SEC = CONFIG_FREERTOS_HZ} ;
    static void init(void);
    static void ledOff(void);
    static void ledOn(void);
};

#endif // BSP_HPP
</text>
  </file>
  <file name="bsp.cpp">
   <text>#include &quot;qpcpp.hpp&quot;   // QP-C++ framework
#include &quot;blinky.hpp&quot;  // Blinky application interface
#include &quot;bsp.hpp&quot;     // Board Support Package (BSP)
#include &quot;Arduino.h&quot;
#include &quot;esp_freertos_hooks.h&quot;

using namespace QP;
static constexpr unsigned LED_BUILTIN = 13;
// QS facilities

// un-comment if QS instrumentation needed
//#define QS_ON
// BSP functions
static void tickHook_ESP32(void); /*Tick hook for QP */
static uint8_t const l_TickHook = static_cast&lt;uint8_t&gt;(0);

static void tickHook_ESP32(void)
{
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    /* process time events for rate 0 */
    QF::TICK_FROM_ISR(&amp;xHigherPriorityTaskWoken, &amp;l_TickHook);
    /* notify FreeRTOS to perform context switch from ISR, if needed */
    if(xHigherPriorityTaskWoken) {
        portYIELD_FROM_ISR();
    }
}

//............................................................................
void BSP::init(void) {
    // initialize the hardware used in this sketch...
    // NOTE: interrupts are configured and started later in QF::onStartup()
    pinMode(LED_BUILTIN, OUTPUT);
    Serial.begin(115200); // run serial port at 115200 baud rate
    QS_INIT(nullptr);
#ifdef QS_ON
    // setup the QS filters...
    QS_GLB_FILTER(QP::QS_SM_RECORDS); // state machine records
    QS_GLB_FILTER(QP::QS_AO_RECORDS); // active object records
    QS_GLB_FILTER(QP::QS_UA_RECORDS); // all user records
#endif
}
//............................................................................
void BSP::ledOff(void) {
    digitalWrite(LED_BUILTIN, LOW);
}
//............................................................................
void BSP::ledOn(void) {
    digitalWrite(LED_BUILTIN, HIGH);
}

//............................................................................
void QSpy_Task(void *) {
  while(1)
  {
    // transmit QS outgoing data (QS-TX)
    uint16_t len = Serial.availableForWrite();
    if (len &gt; 0U) { // any space available in the output buffer?
        uint8_t const *buf = QS::getBlock(&amp;len);
        if (buf) {
            Serial.write(buf, len); // asynchronous and non-blocking
        }
    }

    // receive QS incoming data (QS-RX)
    len = Serial.available();
    if (len &gt; 0U) {
        do {
            QP::QS::rxPut(Serial.read());
        } while (--len &gt; 0U);
        QS::rxParse();
    }
    delay(100);
  };
}

void QF::onStartup(void) {
    esp_register_freertos_tick_hook_for_cpu(tickHook_ESP32, QP_CPU_NUM);
    QS_OBJ_DICTIONARY(&amp;l_TickHook);
#ifdef QS_ON
    xTaskCreatePinnedToCore(
                    QSpy_Task,   /* Function to implement the task */
                    &quot;QSPY&quot;, /* Name of the task */
                    10000,      /* Stack size in words */
                    NULL,       /* Task input parameter */
                    configMAX_PRIORITIES-1,          /* Priority of the task */
                    NULL,       /* Task handle. */
                    QP_CPU_NUM);  /* Core where the task should run */
#endif
}
//............................................................................
extern &quot;C&quot; Q_NORETURN Q_onAssert(char const * const module, int location) {
    //
    // NOTE: add here your application-specific error handling
    //
    (void)module;
    (void)location;
    Serial.print(&quot;QP Assert module:&quot;);
    Serial.print(module);
    Serial.print(&quot;,&quot;);
    Serial.println(location);
    QF_INT_DISABLE(); // disable all interrupts
    for (;;) { // sit in an endless loop for now
    }
}

//----------------------------------------------------------------------------
// QS callbacks...
//............................................................................
bool QP::QS::onStartup(void const * arg) {
    static uint8_t qsTxBuf[1024]; // buffer for QS transmit channel (QS-TX)
    static uint8_t qsRxBuf[128];  // buffer for QS receive channel (QS-RX)
    initBuf  (qsTxBuf, sizeof(qsTxBuf));
    rxInitBuf(qsRxBuf, sizeof(qsRxBuf));
    return true; // return success
}
//............................................................................
void QP::QS::onCommand(uint8_t cmdId, uint32_t param1,
                       uint32_t param2, uint32_t param3)
{
    (void)cmdId;
    (void)param1;
    (void)param2;
    (void)param3;
}
//............................................................................
void QP::QS::onCleanup(void) {
}
//............................................................................
QP::QSTimeCtr QP::QS::onGetTime(void) {
    return millis();
}
//............................................................................
void QP::QS::onFlush(void) {
#ifdef QS_ON
    uint16_t len = 0xFFFFU; // big number to get as many bytes as available
    uint8_t const *buf = QS::getBlock(&amp;len); // get continguous block of data
    while (buf != nullptr) { // data available?
        Serial.write(buf, len); // might poll until all bytes fit
        len = 0xFFFFU; // big number to get as many bytes as available
        buf = QS::getBlock(&amp;len); // try to get more data
    }
    Serial.flush(); // wait for the transmission of outgoing data to complete
#endif // QS_ON
}
//............................................................................
void QP::QS::onReset(void) {
    esp_restart();
}
</text>
  </file>
  <file name="blinky.hpp">
   <text>#ifndef BLINKY_HPP
#define BLINKY_HPP

enum BlinkySignals {
    TIMEOUT_SIG = QP::Q_USER_SIG,
    MAX_SIG
};

// genearate declarations of all opaque AO pointers
$declare${AOs::AO_Blinky}
//...

#endif // BLINKY_HPP
</text>
  </file>
  <file name="blinky_bsp-esp32.ino">
   <text>#include &quot;qpcpp.hpp&quot;   // QP-C++ framework
#include &quot;blinky.hpp&quot;  // Blinky application interface
#include &quot;bsp.hpp&quot;     // Board Support Package (BSP)

using namespace QP;
static constexpr unsigned stack_size = 1000;

//............................................................................
void setup() {
    QF::init(); // initialize the framework
    BSP::init(); // initialize the BSP

    // statically allocate event queues for the AOs and start them...
    static QEvt const *blinky_queueSto[30];
    AO_Blinky-&gt;start(1U, // priority
                     blinky_queueSto, // queu storage for evets
                     Q_DIM(blinky_queueSto), //len of queue
                     nullptr, // No static stack
                     stack_size); 
     QF::run(); // Normally QF Run is located in a loop 
                //but since using Arduino SDK not necessary
                // Called once to call QF::OnStartup and produce the QS trace 
}

//............................................................................
void loop() {
    QF::run(); // run the QF/C++ framework
}

//============================================================================
// generate declarations and definitions of all AO classes (state machines)...
$declare${AOs::Blinky}
$define${AOs::Blinky}
//...

//============================================================================
// generate definitions of all AO opaque pointers...
$define${AOs::AO_Blinky}
//...
</text>
  </file>
 </directory>
</model>
